%Primeiro, a função Link é usada para criar cada elo. 
% Os parâmetros da função Link são exatamente os parâmetros
% de Denavit-Hartemberg do elo em questão, nesta ordem: 
% theta = ângulo da junta (rad)
% d = deslocamento do elo (m)
% a = comprimento do elo (m)
% alpha = torção do elo (rad)
% sigma = tipo de junta (0: rotativa ou 1: prismática)
clear all
close all
clc
startup_rvc;

%% Conexao com ROS

setenv('ROS_MASTER_URI','http://192.168.0.12:11311')
setenv('ROS_IP','192.168.0.11')

rosinit;

%% Criação dos Links para o braço de 6-juntas
L(1) = Revolute('a', 0, 'alpha', pi/2, 'd', 0.125, 'qlim', [-2.79, 2.79]);
L(2) = Revolute('a', 0.21, 'alpha', 0, 'd', 0, 'offset', pi/2, 'qlim', [-2.09, 2.09]);
L(3) = Revolute('a', -0.075, 'alpha', -pi/2, 'd', 0, 'offset', -pi/2, 'qlim', [0.33, 2.79]);
L(4) = Revolute('a', 0, 'alpha', pi/2, 'd', 0.21, 'qlim', [-2.79, 2.79]);
L(5) = Revolute('a', 0, 'alpha', -pi/2, 'd', 0, 'qlim', [-2.09, 2.09]);
L(6) = Revolute('a', 0, 'alpha', 0, 'd', 0.07, 'qlim', [-6.28, 6.28]);


robot = SerialLink(L, 'name', 'Denso');
% Config inicial para o Denso
q = [0 0 -pi/2 0 0 0];

% Matriz de transformação por cinemática direta(Config Inicial)
Kd = robot.fkine(q);
% q()s gerados por cinemática inversa(Config Inicial)
Ki = robot.ikunc(Kd);

%%
%Pose cube ROS
sub = rossubscriber('/denso_cube_tf');
my_sub= receive(sub, 10);



%%
%Ponto acima do cubo
x1 = my_sub.Transforms.Transform.Translation.X + 0.1;
y1 = my_sub.Transforms.Transform.Translation.Y + 0.02;
z1 =my_sub.Transforms.Transform.Translation.Z - 0.025 + 0.25 - 0.115;
quat_angles = my_sub.Transforms.Transform.Rotation/

t1 = transl(x1, y1, z1+0.15);
t1(1:3,1:3) = [-1 0 0;0 1 0;0 0 -1];
%Ponto no meio do cubo
x2 = my_sub.Transforms.Transform.Translation.X + 0.1;
y2 = my_sub.Transforms.Transform.Translation.Y + 0.02;
z2 = my_sub.Transforms.Transform.Translation.Z - 0.025 + 0.19 - 0.215;
t2 = transl(x2, y2, z2+0.15);
t2(1:3,1:3) = [-1 0 0;0 1 0;0 0 -1];
%Ponto goal
x3 = 0.2;
y3 = 0.155;
z3 = z2;
t3 = transl(x3,y3,z3+0.15);
t3(1:3,1:3) = [-1 0 0;0 1 0;0 0 -1];
%Cinematica inversa
Ki1 = robot.ikunc(t1);
Ki2 = robot.ikunc(t2);
Ki3 = robot.ikunc(t3);
% robot.plot(q);
% pause(3)
% robot.plot(Ki1);
% pause(3)
% robot.plot(Ki2);
% pause(3)
% robot.plot(q);
% pause(3)
% robot.plot(Ki3);
% pause(3)
robot.plot(q);

robot.teach()



%%
% Essas trajetórias serão enviadas para o denso como angulos por cinemática
% inversa
t = 50;
traj = jtraj(q, Ki1, t);
traj2 = jtraj(Ki1, Ki2, t);

% Aqui vai entrar a coordenada que o usr inserir
traj3 = jtraj(Ki2, q, t);
traj4 = jtraj(q, Ki3, t);
traj5 = jtraj(Ki3, q, t);

trajF = [traj;traj2;traj3;traj4;traj5]
%Kd
%Kd2 
%traj
%Trajetória inicial=>cub
%%
for i= 1:1:t
    [traj(i, 1) traj(i, 2) traj(i, 3) traj(i, 4) traj(i, 5) traj(i, 6)];
    robot.plot([traj(i, 1) traj(i, 2) traj(i, 3) traj(i, 4) traj(i, 5) traj(i, 6)])
    pause(0.01);
end
%%
for i= 1:1:t
    
    robot.plot([traj2(i, 1) traj2(i, 2) traj2(i, 3) traj2(i, 4) traj2(i, 5) traj2(i, 6)])
    pause(0.01);
end
%%
for i= 1:1:t
    
    robot.plot([traj3(i, 1) traj3(i, 2) traj3(i, 3) traj3(i, 4) traj3(i, 5) traj3(i, 6)])
    pause(0.01);
end

%%
for i= 1:1:t
    
    robot.plot([traj4(i, 1) traj4(i, 2) traj4(i, 3) traj4(i, 4) traj4(i, 5) traj4(i, 6)])
    pause(0.01);
end
%%
for i= 1:1:t
    
    robot.plot([traj5(i, 1) traj5(i, 2) traj5(i, 3) traj5(i, 4) traj5(i, 5) traj5(i, 6)])
    pause(0.01);
end
%%
for i = 1:1:t*5
    
    stheta1 = num2str(trajF(i,1));
    stheta2 = num2str(trajF(i,2));
    stheta3 = num2str(trajF(i,3));
    stheta4 = num2str(trajF(i,4));
    stheta5 = num2str(trajF(i,5));
    stheta6 = num2str(trajF(i,6));
    pause(0.1)
    set_param('projetoRobotica/theta1','Value',stheta1);
    set_param('projetoRobotica/theta2','Value',stheta2);
    set_param('projetoRobotica/theta3','Value',stheta3);
    set_param('projetoRobotica/theta4','Value',stheta4);
    set_param('projetoRobotica/theta5','Value',stheta5);
    set_param('projetoRobotica/theta6','Value',stheta6);
    if i == t*2
        set_param('projetoRobotica/gripper','Value','0.43');
        pause(3)
    end
    
    if i == t*4
        set_param('projetoRobotica/gripper','Value','0');
        pause(3)
    end
    
end

% for i = 1:1:t
%     [traj(i,1) traj(i,2) traj(i,3) traj(i,4) traj(i,5) traj(i,6)]
%     robot.plot([traj(i,1) traj(i,2) traj(i,3) traj(i,4) traj(i,5) traj(i,6)])
%     pause(0.01);
% end
% %Trajetória cubo=>inicial
% for i = 1:1:t
%     [traj2(i,1) traj2(i,2) traj2(i,3) traj2(i,4) traj2(i,5) traj2(i,6)]
%     robot.plot([traj2(i,1) traj2(i,2) traj2(i,3) traj2(i,4) traj2(i,5) traj2(i,6)])
%     pause(0.01);
% end
% %Trajetória inicial=>destino
% for i = 1:1:t
%     [traj3(i,1) traj3(i,2) traj3(i,3) traj3(i,4) traj3(i,5) traj3(i,6)]
%     robot.plot([traj3(i,1) traj3(i,2) traj3(i,3) traj3(i,4) traj3(i,5) traj3(i,6)])
%     pause(0.01);
% end
% %Trajetória destino=>inicial
% for i = 1:1:t
%     [traj4(i,1) traj4(i,2) traj4(i,3) traj4(i,4) traj4(i,5) traj4(i,6)]
%     robot.plot([traj4(i,1) traj4(i,2) traj4(i,3) traj4(i,4) traj4(i,5) traj4(i,6)])
%     pause(0.01);
% end

%%
setpoint = [0.1, 0.5, 0];

qnew = [0 0 -pi/2 0 0 0];

w = sqrt((setpoint(1).^2) + (setpoint(2).^2))

qnew(1) = atan2(setpoint(2),setpoint(1));
qnew(2) = atan2(setpoint(3), w)
qnew(3) = atan2(w, setpoint(3))

robot.plot(qnew);

%% 
% Forward and inverse kinematics

%qf = [0 pi/2 -pi/2 0 0 0];
syms q1 q2 q3 q4 q5 q6;
T = robot.fkine([q1 q2 q3 q4 q5 q6]);
%T_i = robot.ikine(T)
%T = robot.fkine(qf);
%J = robot.jacob0(qf);
%q_i = robot.ikine(T)

%% Find the transformation matrix of the last frame.
syms th6;
syms q1 q2 q3 q4 q5 q6;
%last_frame = rotz(th6)* transl(0 0 70)
T01 = transl(0, 0, 0.125) * rotx(pi/2) * rotz(q1)
%%F = transl(0, 0, 70)